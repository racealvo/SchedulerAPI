#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchedulerAPI.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Scheduler")]
	public partial class SchedulerDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonType(PersonType instance);
    partial void UpdatePersonType(PersonType instance);
    partial void DeletePersonType(PersonType instance);
    partial void InsertPersonType_Person(PersonType_Person instance);
    partial void UpdatePersonType_Person(PersonType_Person instance);
    partial void DeletePersonType_Person(PersonType_Person instance);
    #endregion
		
		public SchedulerDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SchedulerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SchedulerDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchedulerDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchedulerDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SchedulerDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonType> PersonTypes
		{
			get
			{
				return this.GetTable<PersonType>();
			}
		}
		
		public System.Data.Linq.Table<PersonType_Person> PersonType_Persons
		{
			get
			{
				return this.GetTable<PersonType_Person>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PersonID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private EntitySet<PersonType_Person> _PersonType_Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(short value);
    partial void OnPersonIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    #endregion
		
		public Person()
		{
			this._PersonType_Persons = new EntitySet<PersonType_Person>(new Action<PersonType_Person>(this.attach_PersonType_Persons), new Action<PersonType_Person>(this.detach_PersonType_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonType_Person", Storage="_PersonType_Persons", ThisKey="PersonID", OtherKey="fk_PersonID")]
		public EntitySet<PersonType_Person> PersonType_Persons
		{
			get
			{
				return this._PersonType_Persons;
			}
			set
			{
				this._PersonType_Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonType_Persons(PersonType_Person entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonType_Persons(PersonType_Person entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonType")]
	public partial class PersonType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _PersonTypeID;
		
		private string _Type;
		
		private EntitySet<PersonType_Person> _PersonType_Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonTypeIDChanging(short value);
    partial void OnPersonTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public PersonType()
		{
			this._PersonType_Persons = new EntitySet<PersonType_Person>(new Action<PersonType_Person>(this.attach_PersonType_Persons), new Action<PersonType_Person>(this.detach_PersonType_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonTypeID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short PersonTypeID
		{
			get
			{
				return this._PersonTypeID;
			}
			set
			{
				if ((this._PersonTypeID != value))
				{
					this.OnPersonTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PersonTypeID = value;
					this.SendPropertyChanged("PersonTypeID");
					this.OnPersonTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonType_PersonType_Person", Storage="_PersonType_Persons", ThisKey="PersonTypeID", OtherKey="fk_PersonTypeID")]
		public EntitySet<PersonType_Person> PersonType_Persons
		{
			get
			{
				return this._PersonType_Persons;
			}
			set
			{
				this._PersonType_Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonType_Persons(PersonType_Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonType = this;
		}
		
		private void detach_PersonType_Persons(PersonType_Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonType_Person")]
	public partial class PersonType_Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _fk_PersonTypeID;
		
		private short _fk_PersonID;
		
		private EntityRef<PersonType> _PersonType;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfk_PersonTypeIDChanging(short value);
    partial void Onfk_PersonTypeIDChanged();
    partial void Onfk_PersonIDChanging(short value);
    partial void Onfk_PersonIDChanged();
    #endregion
		
		public PersonType_Person()
		{
			this._PersonType = default(EntityRef<PersonType>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_PersonTypeID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short fk_PersonTypeID
		{
			get
			{
				return this._fk_PersonTypeID;
			}
			set
			{
				if ((this._fk_PersonTypeID != value))
				{
					if (this._PersonType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_PersonTypeIDChanging(value);
					this.SendPropertyChanging();
					this._fk_PersonTypeID = value;
					this.SendPropertyChanged("fk_PersonTypeID");
					this.Onfk_PersonTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_PersonID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short fk_PersonID
		{
			get
			{
				return this._fk_PersonID;
			}
			set
			{
				if ((this._fk_PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_PersonIDChanging(value);
					this.SendPropertyChanging();
					this._fk_PersonID = value;
					this.SendPropertyChanged("fk_PersonID");
					this.Onfk_PersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonType_PersonType_Person", Storage="_PersonType", ThisKey="fk_PersonTypeID", OtherKey="PersonTypeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonType PersonType
		{
			get
			{
				return this._PersonType.Entity;
			}
			set
			{
				PersonType previousValue = this._PersonType.Entity;
				if (((previousValue != value) 
							|| (this._PersonType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonType.Entity = null;
						previousValue.PersonType_Persons.Remove(this);
					}
					this._PersonType.Entity = value;
					if ((value != null))
					{
						value.PersonType_Persons.Add(this);
						this._fk_PersonTypeID = value.PersonTypeID;
					}
					else
					{
						this._fk_PersonTypeID = default(short);
					}
					this.SendPropertyChanged("PersonType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonType_Person", Storage="_Person", ThisKey="fk_PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonType_Persons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonType_Persons.Add(this);
						this._fk_PersonID = value.PersonID;
					}
					else
					{
						this._fk_PersonID = default(short);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
